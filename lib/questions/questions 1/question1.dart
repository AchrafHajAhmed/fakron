import 'dart:math';
import 'package:flutter/material.dart';

class Question1 extends StatefulWidget {
  @override
  _Question1State createState() => _Question1State();
}

class _Question1State extends State<Question1> {
  final List<Map<String, Object>> questions = [
    {
      'question': 'ุฃูู ุชุนูุด ุงูุณูุงุญูุ',
      'options': ['ูู ุงููุงุก', 'ุนูู ุงูุฃุฑุถ', 'ูู ููุงููุง'],
      'answer': 'ูู ููุงููุง',
    },
    {
      'question': 'ูุง ูู ุทุนุงู ุงูุณูุงุญู ุงูุจุญุฑูุฉ ุงูููุถูุ',
      'options': ['ุงูุทุญุงูุจ', 'ุงูุดููููุงุชุฉ', 'ุงูุจูุชุฒุง'],
      'answer': 'ุงูุทุญุงูุจ',
    },
    {
      'question': 'ูู ูููู ุฃู ุชุนูุด ุงูุณูุงุญู ูู ุงููุชูุณุทุ',
      'options': ['10-20 ุณูุฉ', '50-100 ุณูุฉ', '500 ุณูุฉ'],
      'answer': '50-100 ุณูุฉ',
    },
    {
      'question': 'ูุง ูู ุฃูุจุฑ ุฃููุงุน ุงูุณูุงุญู ูู ุงูุนุงููุ',
      'options': ['ุงูุณูุญูุงุฉ ุงูุฎุถุฑุงุก', 'ุงูุณูุญูุงุฉ ุฌูุฏูุฉ ุงูุธูุฑ', 'ุณูุญูุงุฉ ุฐุงุช ุตุฏูุฉ ูุงุนูุฉ'],
      'answer': 'ุงูุณูุญูุงุฉ ุฌูุฏูุฉ ุงูุธูุฑ',
    },
    {
      'question': 'ุฃูู ุชุถุน ุงูุณูุงุญู ุงูุจุญุฑูุฉ ุจูุถูุงุ',
      'options': ['ูู ุงููุงุก', 'ุนูู ุงูุดุงุทุฆ', 'ุชุญุช ุงููุงุก'],
      'answer': 'ุนูู ุงูุดุงุทุฆ',
    },
    {
      'question': 'ููุงุฐุง ุงูุณูุงุญู ูููุฉ ูููุธุงู ุงูุจูุฆูุ',
      'options': ['ุชููุซ ุฃูู', 'ุชุฃูู ุงูููุงูุงุช', 'ุชุญุงูุธ ุนูู ุงูุดุนุงุจ ุงููุฑุฌุงููุฉ'],
      'answer': 'ุชุญุงูุธ ุนูู ุงูุดุนุงุจ ุงููุฑุฌุงููุฉ',
    },
  ];

  late int currentQuestionIndex;
  String feedbackMessage = '';

  @override
  void initState() {
    super.initState();
    currentQuestionIndex = Random().nextInt(questions.length);
  }

  void checkAnswer(String selectedAnswer) {
    final correctAnswer = questions[currentQuestionIndex]['answer'] as String;
    setState(() {
      if (selectedAnswer == correctAnswer) {
        feedbackMessage = 'ุฅุฌุงุจุฉ ุตุญูุญุฉ! ๐';
      } else {
        feedbackMessage = 'ุฅุฌุงุจุฉ ุฎุงุทุฆุฉ. ๐';
      }
    });

    Future.delayed(Duration(seconds: 2), () {
      setState(() {
        feedbackMessage = '';
        currentQuestionIndex = Random().nextInt(questions.length);
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    final currentQuestion = questions[currentQuestionIndex];
    final questionText = currentQuestion['question'] as String;
    final options = currentQuestion['options'] as List<String>;

    return Scaffold(
      appBar: AppBar(
        title: Text('ุงูุณูุงุญู'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(
              questionText,
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              textAlign: TextAlign.right,
            ),
            SizedBox(height: 20),
            ...options.map((option) {
              return ElevatedButton(
                onPressed: () => checkAnswer(option),
                child: Text(option, textAlign: TextAlign.center),
              );
            }).toList(),
            SizedBox(height: 20),
            if (feedbackMessage.isNotEmpty)
              Text(
                feedbackMessage,
                style: TextStyle(
                  fontSize: 16,
                  color: feedbackMessage.contains('ุตุญูุญุฉ') ? Colors.green : Colors.red,
                ),
                textAlign: TextAlign.center,
              ),
          ],
        ),
      ),
    );
  }
}
